#!/bin/bash

# Control a virtual server using basic commands.
#
# @author Anders Olsson


readonly VNODECTRL_VERSION="10.12-alpha3"
readonly VNODECTRL_BASENAME=`basename $0`

readonly VNODECTRL_ROOT="/opt/vnodectrl.d"
readonly VNODECTRL_LOCAL="$HOME/.vnodectrl.d"

readonly VNODECTRL_BIN="$VNODECTRL_ROOT/bin"
readonly VNODECTRL_LIB="$VNODECTRL_ROOT/lib"

readonly VNODECTRL_CONFIG="$VNODECTRL_LOCAL/config"
readonly VNODECTRL_IDENTIFIERS="$VNODECTRL_LOCAL/identifier"


. $VNODECTRL_LIB/core
. $VNODECTRL_LIB/getopts_long


# Implementation of hook_help
#
# @author Anders Olsson <anders.olsson@nodeone.se>
core_help() {
    if [ -n "$error_msg" ]; then
    	echo $error_msg
    fi

    cat << EOF
usage: $VNODECTRL_BASENAME [options] command


Options:
  -h                              Show this message
  -i identifier                   Specifies identifier


Commands:
$(_print_plugins_info)

EOF

    return 0
}

# Implementation of hook_completion
#
# @author Anders Olsson <anders.olsson@nodeone.se>
core_completion() {
    echo ${VNODECTRL_PLUGINS[@]}
}


_print_plugins_info() {
    local info
    
    for p in ${VNODECTRL_PLUGINS[@]}; do
        info=''
        if type -t "${p}_info" > /dev/null; then
            info=$("${p}_info")
        fi
        
        printf "  %-32s%s\n" $p "$info"
    done
}


for p in $(find $VNODECTRL_BIN -type f -perm -100 -exec basename {} \;); do
    path=$VNODECTRL_BIN/$p
    api_version=$(grep -ioE '^[ \t]*#[ \t]*api_version=[0-9]+[ \t]*$' $path | sed -E 's/.*([0-9]+).*/\1/')
    
    if [ ${api_version:-0} -eq 1 ]; then
        . $path
        
        VNODECTRL_PLUGINS[${#VNODECTRL_PLUGINS[@]}]=$p
    fi
done

error_msg=''
call_usage=false
loaded_identity=false

if [ $# -eq 0 ]; then
	set -- "-h"
fi

while getopts_long "hi:" opt \
	help no_argument \
	completion no_argument \
	"" "$@"
do
	case "$opt" in
	    i)
	        vnode_identity_load ${OPTLARG}
	        loaded_identity=true
	    ;;
	    completion)
    	    shift "$(($OPTLIND - 1))"
    	    
	        CWORD=$1
	        
	        shift
	        
	        WORDS=( $@ )
	        
	        if [ $CWORD -eq 1 ]; then
	            plugin='core'
            else
	            plugin=${WORDS[1]:-core}
	        fi
            
	        if type -t "${plugin}_completion" > /dev/null; then
	            let 'CWORD -= 2'
	            WORDS=( ${WORDS[@]:2} )
	            
	            "${plugin}_completion"
	            
	            exit 0
	        fi
	        
	        exit 1
	    ;;
		h|help)
			call_usage=true
		;;
		:)
			error_msg=$OPTLERR
			call_usage=true
			
			break
		;;
	esac
done

if $call_usage; then
	core_help
	
	exit 1
fi

if [ -z "$(identity_list)" ]; then
    echo         "You don't have any identity files."
    read -n 1 -p "Do you want to create one? (Y/n): " choice && choice=${choice:-N}
    echo         ""

    if [[ $choice == [yY] ]]; then
        _identity_create_identifier
    fi
fi

if ! loaded_identity; then
    vnode_identity_unload
fi

shift "$(($OPTLIND - 1))"

plugin=$1

if ! type -t "${plugin}_exec" > /dev/null; then
    core_help
    exit 1
fi

shift

"${plugin}_exec" "$@"

exit $?
