#!/bin/bash


# ---------- vnode_variable ----------

# Get variable from file
#
# @author Anders Olsson
vnode_variable_get() {
    local var
    
    if (( $# < 2 )); then
        return 1
    fi
    
    if [ ! -f $1 ]; then
        return 1
    fi
    
    var=$(grep -o "^$2=.*$" $1 | sed -E -e 's/.*=//')
    
    echo ${var:-$3}
    
    return 0
}

# Set variable to file
#
# @author Anders Olsson
vnode_variable_set() {
    if [ ! $# -eq 3 ]; then
        return 1
    fi
    
    if [ ! -f $1 ]; then
        return 1
    fi
    
    sed -i"" "/^$2=.*$/d" $1 > /dev/null
    
    if [ -n "$3" ]; then
        echo "$2=$3" | tee -a $1 > /dev/null
    fi
    
    return 0
}



# ---------- vnode_config ----------

# Get variable from default config file
#
# @author Anders Olsson
vnode_config_get() {
    if [ ! -f $VNODECTRL_CONFIG ]; then
        touch $VNODECTRL_CONFIG
    fi
    
    vnode_variable_get $VNODECTRL_CONFIG $@
    
    return 0
}

# Set variable to default config file
#
# @author Anders Olsson
vnode_config_set() {
    if [ ! -f $VNODECTRL_CONFIG ]; then
        touch $VNODECTRL_CONFIG
    fi
    
    vnode_variable_set $VNODECTRL_CONFIG $@
    
    return 0
}



# ---------- vnode_identity ----------

# List all existing identifiers
#
# @author Anders Olsson
vnode_identity_list() {
    local f identifiers
    
    if [ ! -d $VNODECTRL_IDENTIFIERS ]; then
        mkdir -p $VNODECTRL_IDENTIFIERS
    fi
    
    for f in $(find $VNODECTRL_IDENTIFIERS/* -iname "*.conf" -exec basename {} \;); do
        identifiers[${#identifiers[@]}]=${f%%.*}
    done
    
    echo ${identifiers[@]}
}

# Check if identity exist
#
# @input identity
vnode_identity_exists() {
    if [ ! $# -eq 1 ]; then
        return 1
    fi
    
    if [[ ! " $(vnode_identity_list) " =~ " $1 " ]]; then
        return 1
    fi
    
    return 0
}

vnode_identity_create() {
    if [ ! $# -eq 1 ]; then
        return 1
    fi
    
    if vnode_identity_exists $1; then
        return 1
    fi
    
    touch $VNODECTRL_IDENTIFIERS/$1.conf
    
    return $?
}

vnode_identity_delete() {
    if [ ! $# -eq 1 ]; then
        return 1
    fi
    
    if ! vnode_identity_exists $1; then
        return 1
    fi
    
    rm $VNODECTRL_IDENTIFIERS/$1.conf
    
    return $?
}

vnode_identity_load() {
    if [ ! $# -eq 1 ]; then
        return 1
    fi
    
    if ! vnode_identity_exists $1; then
        return 1
    fi
    
    export VNODECTRL_IDENTITY_ACTIVE=$1
    
    return 0
}

vnode_identity_unload() {
    export VNODECTRL_IDENTITY_ACTIVE=$(vnode_config_get "default_identifier")
    
    return 0
}

vnode_identity_get() {
    if ! vnode_identity_exists $VNODECTRL_IDENTITY_ACTIVE; then
        return 1
    fi

    vnode_variable_get $VNODECTRL_IDENTIFIERS/$VNODECTRL_IDENTITY_ACTIVE.conf $@

    return 0
}

vnode_identity_set() {
    if ! vnode_identity_exists $VNODECTRL_IDENTITY_ACTIVE; then
        return 1
    fi
    
    vnode_variable_set $VNODECTRL_IDENTIFIERS/$VNODECTRL_IDENTITY_ACTIVE.conf $@
    
    return 0
}



# ---------- host ----------

# Control if a host is online using ping.
#
# @author Anders Olsson
#
# @input host_address
host_is_online() {
    if [ ! $# -eq 1 ]; then
        return 1
    fi
    
    if ! ping -c 1 -W 5 $1 > /dev/null; then
    	return 1
    fi
    
    return 0
}



# ---------- vnode ----------

# Try to call function
#
# @author Anders Olsson
#
# @input return_value
# @input call_function
vnode_try() {
    if [ $# -le 3 ]; then
        return ${1:-1}
    fi
    
    if type -t "$2" > /dev/null; then
        call=$2
        
        shift 2
        
        $call $@
        
        return $?
    fi
    
    return $1
}

# Check if local user is root
#
# @author Anders Olsson
vnode_is_root() {
    if [ $(id -u) -ne 0 ]; then
    	return 1
    fi

    return 0
}
