#!/bin/bash

# Manage vnodectrl config files
# @author Anders Olsson (logaritmisk <anders@nodeone.se>)


. $VNODECTRL_LIB/common
. $VNODECTRL_LIB/getopts_long


function usage() {
cat << EOF
usage: $VNODECTRL_BASENAME `basename $0` [options]


Options:
  -l			List configurations
  -d			Set default config
  -c            Create a new config
  -h			Show this message

EOF

	return 0
}

function list_configs() {
	local default_cfg=$(get_default_config)
	local ext
	
	echo "Config(s):"
	
	for c in $(get_all_configs); do
		if [ $default_cfg == $c ]; then
			ext="(default)"
		else
			ext=""
		fi
		
		printf "  %s %s\n" $c $ext
	done
	
	echo
	
	return 0
}

function default_config() {
	if [ -z $args ]; then
		local default_cfg=$(get_default_config)
		
		if [ -z $default_cfg ]; then
			echo "There is no default config."
			
			return 1
		fi
		
		echo "$default_cfg"
	else
		local local_cfg=$VNODECTRL_LOCAL/conf.d/$args
		
		if [ ! -f $local_cfg ]; then
			echo "'$args' is not a valid config file."
			
			return 1
		fi
		
		sed '/^DEFAULT_CONFIG=.*$/d' $VNODECTRL_LOCAL/default.conf > tmp && mv tmp $VNODECTRL_LOCAL/default.conf
		echo "DEFAULT_CONFIG=$args" | tee -a $VNODECTRL_LOCAL/default.conf > /dev/null
		
		echo "Config '$args' is now set as default."
	fi
	
	return 0
}

function create_config() {
	local srv_folder
	local guest_user
	local guest_pass
	local guest_addr
	
	local cfg_name=$1
	local cfg_path
	
	local input='@'
	local choice
	
	if [ -z "$cfg_name" ]; then
		read -p "Configuration name: " input
		echo ''
		
		cfg_name=$input
	fi
	
	
	cfg_path=$VNODECTRL_LOCAL/conf.d/$cfg_name
	
	
	if [ -f $cfg_path ]; then
		echo "A configuration with name '$cfg_name' already exists."
		read -n 1 -p "Do you want overwrite it? (y/N): " choice && choice=${choice:-Y}
		echo ''
		
		if [ $choice = 'n' ] || [ $choice = 'N' ]; then
			return 1
		fi
	fi
	
	
	# Get path to virtual folder
	while [ ! -d $input ]; do
		read -e -p "Local SRV folder [$srv_folder]: " input && eval input=$input
		
		if [ ! -d $input ]; then
			read -n 1 -p "Folder '$input' doesn't exist, do you want create it? (Y/n): " choice && choice=${choice:-Y}
			echo ''
			
			if [ $choice = 'y' || $choice = 'Y' ]; then
				mkdir -p $input
			else
				return 1
			fi
		fi
	done
	
	srv_folder=$(echo ${input:-$srv_folder} | sed 's/[ \t\/]*$//')
	
	
	# Get guest username
	read -p "Guest username [$guest_user]: " input
	guest_user=${input:-$guest_user}
	
	
	# Get guest password
	read -p "Guest password [$guest_pass]: " input
	guest_pass=${input:-$guest_pass}
	
	
	# Get guest address
	read -p "Guest address [$guest_addr]: " input
	guest_addr=${input:-$guest_addr}
	
	
	# Write new settings
tee $cfg_path > /dev/null << EOF
SRV_FOLDER=$srv_folder
GUEST_USER=$guest_user
GUEST_PASS=$guest_pass
GUEST_ADDR=$guest_addr
EOF
}


call=''


if [ $# -eq 0 ]; then
	set -- "-h"
fi

while getopts_long ":hld:c" opt \
	help no_argument "" "$@"
do
	case "$opt" in
		l)
			call='list_configs'
		;;
		d)
			call='default_config'
			args=$OPTLARG
		;;
		c)
			call='create_config'
		;;
		h|help)
			call='usage'
		;;
		:)
			call='usage'
			printf >&2 '%s: %s\n' "${0##*/}" "$OPTLERR"
			break
		;;
	esac
done

shift "$(($OPTLIND - 1))"

$call $@

exit 1








load_settings "$VNODECTRL_HOME/default.conf" 0


if [ ! -d ~/.vnodectrl.d/conf.d ]; then
	mkdir -p ~/.vnodectrl.d/conf.d
fi


if [ ! -z $1 ]; then
	settings=~/.vnodectrl.d/conf.d/$1
	
	if [ ! -f ~/.vnodectrl.d/conf.d/$1 ]; then
		echo "There is no config file called '$1'."
		
		read -n 1 -p "Do you want to create it? (Y/n): " choice && choice=${choice:-Y}
		echo ''
		
		if [ $choice = 'y' ] || [ $choice = 'Y' ]; then
			echo ''
		else
			exit 1
		fi
	else
		. $settings
	fi
fi
