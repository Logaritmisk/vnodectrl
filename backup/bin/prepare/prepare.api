#!/bin/bash


# Authorize host on guest system
#
# @author Anders Olsson
prepare_authorize_host() {
    local GUEST_USER=$(identity_get 'guest_user')
    local GUEST_PASS=$(identity_get 'guest_pass')
    local GUEST_ADDR=$(identity_get 'guest_addr')
    
    local id_dsa cmd
    
    
    if [ ! -f "$HOME/.ssh/id_dsa.pub" ]; then
        echo "Generate a public ssh key of type dsa and try again."
        
        return 1
    fi
    
    # get public id_dsa key
    id_dsa=$(cat ~/.ssh/id_dsa.pub)
    
    # remove guest from known_hosts
    ssh-keygen -R $GUEST_ADDR > /dev/null 2>&1
    
    # build command to run on server
    cmd="mkdir ~/.ssh; echo '${id_dsa}' | tee -a ~/.ssh/authorized_keys; uniq ~/.ssh/authorized_keys ${$}.temp && mv ${$}.temp ~/.ssh/authorized_keys"
    
    # copy host ssh key to guest
    expect << EOF
log_user 0
spawn ssh -q -oStrictHostKeyChecking=no $GUEST_USER@$GUEST_ADDR "$cmd"
expect "*?assword:*" {
    send "$GUEST_PASS\r\r"
    expect eof
}
EOF
     
    return $?
}

# Authorize guest on host system
#
# @author Anders Olsson
prepare_authorize_guest() {
    local SSH_KEY=$(ssh_remote_exec "cat ~/.vnodectrl.d/ssh/id_dsa.pub")
    
    
    echo $SSH_KEY | tee -a ~/.ssh/authorized_keys > /dev/null
    
    uniq ~/.ssh/authorized_keys $$.temp && mv $$.temp ~/.ssh/authorized_keys
    
    return 1
}

# Check if guest has been prepared
#
# @author Anders Olsson
prepare_is_prepared() {
    ssh_remote_exec "test -f ~/.vnodectrl.d/ssh/id_dsa.pub"
    
    return $?
}
